package com.kh.plant.controller;

import java.util.ArrayList;
import java.util.List;

import com.kh.plant.model.vo.Plant;

// Controller : 사용자가 View를 통해 요청했을 때
// 요청을 받아 처리해준 뒤 다시 처리결과를 View로 반환해줌

public class PlantController {
	// 식물 저장소
	private List<Plant> plants = new ArrayList();
	
	// 초기화 블록
	{
		plants.add(new Plant("안서리움", "분재"));
	}
	
	// View에서 식물 추가 요청을 할 때 마다 호출되는 메소드
	public void createPlant(String name, String type) {
		// 1절 => 객체 생성
		Plant plant = new Plant(name, type);
		
		// 식물저장소에 새로운 식물을 추가
		// 필드로 가지고 있는 List의 필드로 가지고 있는 Object[]의 요소로 추ㄱ
		
		plants.add(plant);
	}
	
	// View에서 전체 식물조회 요청이 왔을 때 호출되는 메소드
	public List readAll() {
		// Plant타입의 객체들의 주소가 요소로 존재하는 Object[]을 View에게 반환
		return plants;
	}

	// View에서 식물 삭제 요청이 왔을 때 호출되는 메소드
	public int deletePlant(String name, String type) {
		// 사용자가 입력한 식물이름 + 식물종류와 일치하는 필드값을 가진 Plant객체를 제거
		// case 1. 동일한 이름 및 종류를 가진 식물이 존재하지 않았다
		// case 2. 동일한 이름 및 종류를 가진 식물이 딱 한 개 존재했다
		// case 3. 동일한 이름 및 종류를 가진 식물이 여러 개 존재했다
		// 성공/실패 여보에 따라서 View에게 반환값을 다르게 돌려주어야 함
	
		// 식물을 제거한 후 제거된 Plant객체를 담아서 반환
//		Plant p = plants.remove(2);
//		List returnList = new ArrayList();
//		returnList.add(p);
//		return returnList;
		
		// 요소가 삭제 될 때 마다 정수값을 증가 시키고
		// 증가된 정수만 반환

		int count = 0;
		
		// 요청처리
		for(int i = 0; i< plants.size(); i++) {
			
			if(name.equals(plants.get(i).getName()) &&
				type.equals(plants.get(i).getType())) {
				
				plants.remove(plants.get(i));
				i--;
				count++;
			}
		}
		return count;
	}
}
